#ifndef KWG_DEFS_H
#define KWG_DEFS_H

#include "board_defs.h"

#define KWG_FILEPATH "data/lexica/"
#define KWG_FILE_EXTENSION ".kwg"

#define KWG_NODE_IS_END_FLAG 0x400000
#define KWG_NODE_ACCEPTS_FLAG 0x800000
#define KWG_ARC_INDEX_MASK 0x3FFFFF
#define KWG_TILE_BIT_OFFSET 24
#define MAX_KWG_STRING_LENGTH (BOARD_DIM)+1
#define MINIMUM_WORD_LENGTH 2

typedef enum {
    KWG_MAKER_OUTPUT_DAWG,
    KWG_MAKER_OUTPUT_GADDAG,
    KWG_MAKER_OUTPUT_DAWG_AND_GADDAG,
} kwg_maker_output_t;

typedef enum {
    KWG_MAKER_MERGE_NONE,
    KWG_MAKER_MERGE_EXACT,
    KWG_MAKER_MERGE_ORDERED_SUBLIST,
    KWG_MAKER_MERGE_UNORDERED_SUBLIST,
} kwg_maker_merge_t;

typedef enum {
    CONVERT_TEXT2DAWG,
    CONVERT_TEXT2GADDAG,
    CONVERT_TEXT2KWG,
    CONVERT_DAWG2TEXT,
    CONVERT_GADDAG2TEXT,
    CONVERT_CSV2KLV,
    CONVERT_KLV2CSV,
    CONVERT_UNKNOWN,
} conversion_type_t;

typedef enum {
    CONVERT_STATUS_SUCCESS,
    CONVERT_STATUS_INPUT_FILE_ERROR,
    CONVERT_STATUS_OUTPUT_FILE_EXISTS,
    CONVERT_STATUS_OUTPUT_FILE_NOT_WRITABLE,
    CONVERT_STATUS_KWG_TOO_LARGE_FOR_FORMAT,
    CONVERT_STATUS_TEXT_CONTAINS_INVALID_LETTER,
    CONVERT_STATUS_TEXT_CONTAINS_WORD_TOO_LONG,
    CONVERT_STATUS_TEXT_CONTAINS_WORD_TOO_SHORT,
    CONVERT_STATUS_MALFORMED_KWG,
    CONVERT_STATUS_UNIMPLEMENTED_CONVERSION_TYPE,
} conversion_status_t;
#endif
