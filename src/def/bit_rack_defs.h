#ifndef BIT_RACK_DEFS_H
#define BIT_RACK_DEFS_H

#include "rack_defs.h"

#define BIT_RACK_BITS_PER_LETTER 4
#define BIT_RACK_MAX_ALPHABET_SIZE 32

#if RACK_SIZE == 2
#define BIT_RACK_C_2_0 1
#define BIT_RACK_C_2_1 BIT_RACK_C_2_0 * 2 / 1
#define BIT_RACK_C_2_2 BIT_RACK_C_2_0
#define BIT_RACK_OFFSET_0 0
#define BIT_RACK_OFFSET_1 BIT_RACK_OFFSET_0 + BIT_RACK_C_2_0
#define BIT_RACK_OFFSET_2 BIT_RACK_OFFSET_1 + BIT_RACK_C_2_1
#define BIT_RACK_COMBINATION_OFFSETS                                           \
  BIT_RACK_OFFSET_0, BIT_RACK_OFFSET_1, BIT_RACK_OFFSET_2
#elif RACK_SIZE == 3
#define BIT_RACK_C_3_0 1
#define BIT_RACK_C_3_1 BIT_RACK_C_3_0 * 3 / 1
#define BIT_RACK_C_3_2 BIT_RACK_C_3_1
#define BIT_RACK_C_3_3 BIT_RACK_C_3_0
#define BIT_RACK_OFFSET_0 0
#define BIT_RACK_OFFSET_1 BIT_RACK_OFFSET_0 + BIT_RACK_C_3_0
#define BIT_RACK_OFFSET_2 BIT_RACK_OFFSET_1 + BIT_RACK_C_3_1
#define BIT_RACK_OFFSET_3 BIT_RACK_OFFSET_2 + BIT_RACK_C_3_2
#define BIT_RACK_COMBINATION_OFFSETS                                           \
  BIT_RACK_OFFSET_0, BIT_RACK_OFFSET_1, BIT_RACK_OFFSET_2, BIT_RACK_OFFSET_3
#elif RACK_SIZE == 4
#define BIT_RACK_C_4_0 1
#define BIT_RACK_C_4_1 BIT_RACK_C_4_0 * 4 / 1
#define BIT_RACK_C_4_2 BIT_RACK_C_4_1 * 3 / 2
#define BIT_RACK_C_4_3 BIT_RACK_C_4_1
#define BIT_RACK_C_4_4 BIT_RACK_C_4_0
#define BIT_RACK_OFFSET_0 0
#define BIT_RACK_OFFSET_1 BIT_RACK_OFFSET_0 + BIT_RACK_C_4_0
#define BIT_RACK_OFFSET_2 BIT_RACK_OFFSET_1 + BIT_RACK_C_4_1
#define BIT_RACK_OFFSET_3 BIT_RACK_OFFSET_2 + BIT_RACK_C_4_2
#define BIT_RACK_OFFSET_4 BIT_RACK_OFFSET_3 + BIT_RACK_C_4_3
#define BIT_RACK_COMBINATION_OFFSETS                                           \
  BIT_RACK_OFFSET_0, BIT_RACK_OFFSET_1, BIT_RACK_OFFSET_2, BIT_RACK_OFFSET_3,  \
      BIT_RACK_OFFSET_4 #elif RACK_SIZE == 5
#define BIT_RACK_C_5_0 1
#define BIT_RACK_C_5_1 BIT_RACK_C_5_0 * 5 / 1
#define BIT_RACK_C_5_2 BIT_RACK_C_5_1 * 4 / 2
#define BIT_RACK_C_5_3 BIT_RACK_C_5_2
#define BIT_RACK_C_5_4 BIT_RACK_C_5_1
#define BIT_RACK_C_5_5 BIT_RACK_C_5_0
#define BIT_RACK_OFFSET_0 0
#define BIT_RACK_OFFSET_1 BIT_RACK_OFFSET_0 + BIT_RACK_C_5_0
#define BIT_RACK_OFFSET_2 BIT_RACK_OFFSET_1 + BIT_RACK_C_5_1
#define BIT_RACK_OFFSET_3 BIT_RACK_OFFSET_2 + BIT_RACK_C_5_2
#define BIT_RACK_OFFSET_4 BIT_RACK_OFFSET_3 + BIT_RACK_C_5_3
#define BIT_RACK_OFFSET_5 BIT_RACK_OFFSET_4 + BIT_RACK_C_5_4
#define BIT_RACK_COMBINATION_OFFSETS                                           \
  BIT_RACK_OFFSET_0, BIT_RACK_OFFSET_1, BIT_RACK_OFFSET_2, BIT_RACK_OFFSET_3,  \
      BIT_RACK_OFFSET_4, BIT_RACK_OFFSET_5 #elif RACK_SIZE == 6
#define BIT_RACK_C_6_0 1
#define BIT_RACK_C_6_1 BIT_RACK_C_6_0 * 6 / 1
#define BIT_RACK_C_6_2 BIT_RACK_C_6_1 * 5 / 2
#define BIT_RACK_C_6_3 BIT_RACK_C_6_2 * 4 / 3
#define BIT_RACK_C_6_4 BIT_RACK_C_6_2
#define BIT_RACK_C_6_5 BIT_RACK_C_6_1
#define BIT_RACK_C_6_6 BIT_RACK_C_6_0
#elif RACK_SIZE == 7
#define BIT_RACK_C_7_0 (1)
#define BIT_RACK_C_7_1 (BIT_RACK_C_7_0 * 7 / 1)
#define BIT_RACK_C_7_2 (BIT_RACK_C_7_1 * 6 / 2)
#define BIT_RACK_C_7_3 (BIT_RACK_C_7_2 * 5 / 3)
#define BIT_RACK_C_7_4 (BIT_RACK_C_7_3)
#define BIT_RACK_C_7_5 (BIT_RACK_C_7_2)
#define BIT_RACK_C_7_6 (BIT_RACK_C_7_1)
#define BIT_RACK_C_7_7 (BIT_RACK_C_7_0)
#define BIT_RACK_OFFSET_0 (0)
#define BIT_RACK_OFFSET_1 (BIT_RACK_OFFSET_0 + BIT_RACK_C_7_0)
#define BIT_RACK_OFFSET_2 (BIT_RACK_OFFSET_1 + BIT_RACK_C_7_1)
#define BIT_RACK_OFFSET_3 (BIT_RACK_OFFSET_2 + BIT_RACK_C_7_2)
#define BIT_RACK_OFFSET_4 (BIT_RACK_OFFSET_3 + BIT_RACK_C_7_3)
#define BIT_RACK_OFFSET_5 (BIT_RACK_OFFSET_4 + BIT_RACK_C_7_4)
#define BIT_RACK_OFFSET_6 (BIT_RACK_OFFSET_5 + BIT_RACK_C_7_5)
#define BIT_RACK_OFFSET_7 (BIT_RACK_OFFSET_6 + BIT_RACK_C_7_6)
#define BIT_RACK_COMBINATION_OFFSETS                                           \
  BIT_RACK_OFFSET_0, BIT_RACK_OFFSET_1, BIT_RACK_OFFSET_2, BIT_RACK_OFFSET_3,  \
      BIT_RACK_OFFSET_4, BIT_RACK_OFFSET_5, BIT_RACK_OFFSET_6,                 \
      BIT_RACK_OFFSET_7
#elif RACK_SIZE == 8
#define BIT_RACK_C_8_0 1
#define BIT_RACK_C_8_1 BIT_RACK_C_8_0 * 8 / 1
#define BIT_RACK_C_8_2 BIT_RACK_C_8_1 * 7 / 2
#define BIT_RACK_C_8_3 BIT_RACK_C_8_2 * 6 / 3
#define BIT_RACK_C_8_4 BIT_RACK_C_8_3 * 5 / 4
#define BIT_RACK_C_8_5 BIT_RACK_C_8_3
#define BIT_RACK_C_8_6 BIT_RACK_C_8_2
#define BIT_RACK_C_8_7 BIT_RACK_C_8_1
#define BIT_RACK_C_8_8 BIT_RACK_C_8_0
#define BIT_RACK_OFFSET_0 0
#define BIT_RACK_OFFSET_1 BIT_RACK_OFFSET_0 + BIT_RACK_C_8_0
#define BIT_RACK_OFFSET_2 BIT_RACK_OFFSET_1 + BIT_RACK_C_8_1
#define BIT_RACK_OFFSET_3 BIT_RACK_OFFSET_2 + BIT_RACK_C_8_2
#define BIT_RACK_OFFSET_4 BIT_RACK_OFFSET_3 + BIT_RACK_C_8_3
#define BIT_RACK_OFFSET_5 BIT_RACK_OFFSET_4 + BIT_RACK_C_8_4
#define BIT_RACK_OFFSET_6 BIT_RACK_OFFSET_5 + BIT_RACK_C_8_5
#define BIT_RACK_OFFSET_7 BIT_RACK_OFFSET_6 + BIT_RACK_C_8_6
#define BIT_RACK_OFFSET_8 BIT_RACK_OFFSET_7 + BIT_RACK_C_8_7
#define BIT_RACK_COMBINATION_OFFSETS                                           \
  BIT_RACK_OFFSET_0, BIT_RACK_OFFSET_1, BIT_RACK_OFFSET_2, BIT_RACK_OFFSET_3,  \
      BIT_RACK_OFFSET_4, BIT_RACK_OFFSET_5, BIT_RACK_OFFSET_6,                 \
      BIT_RACK_OFFSET_7, BIT_RACK_OFFSET_8 #endif
#endif

#endif // BIT_RACK_DEFS_H